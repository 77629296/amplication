import { Field, ObjectType } from "@nestjs/graphql";
import { UserActionResultWithPayload } from "../../userAction/userAction.types";
import { EnumUserActionStatus } from "../../userAction/types";

@ObjectType({
  isAbstract: true,
})
class ModelGroupResource {
  @Field(() => String, {
    nullable: false,
    description:
      "The id of the existing resource or a temporary id for the new resource",
  })
  id!: string;

  @Field(() => String, {
    nullable: false,
    description: "The name of the resource (microservice)",
  })
  name!: string;
}

@ObjectType({
  isAbstract: true,
})
class CopiedEntity {
  @Field(() => String, {
    nullable: false,
    description: "The id of the entity to copy",
  })
  entityId!: string;

  @Field(() => String, {
    nullable: false,
    description: "The name of the entity to copy",
  })
  name!: string;

  @Field(() => String, {
    nullable: false,
    description: "The id of the resource to copy the entity from",
  })
  originalResourceId!: string;

  @Field(() => String, {
    nullable: false,
    description: "The id of the resource to copy the entity to",
  })
  targetResourceId!: string;
}

@ObjectType({
  isAbstract: true,
})
export class BreakServiceToMicroserviceRecommendations {
  @Field(() => [ModelGroupResource], {
    nullable: false,
    description: "The resources (microservices) generated by the ai",
  })
  newResources!: ModelGroupResource[];

  @Field(() => [CopiedEntity], {
    nullable: false,
    description: "The entities with changed parent resource",
  })
  copiedEntities!: CopiedEntity[];
}

@ObjectType({
  isAbstract: true,
})
export class BreakServiceToMicroserviceResult
  implements
    UserActionResultWithPayload<BreakServiceToMicroserviceRecommendations>
{
  @Field(() => EnumUserActionStatus, {
    nullable: false,
    description: "The status of the user action",
  })
  status: EnumUserActionStatus;

  @Field(() => BreakServiceToMicroserviceRecommendations, {
    nullable: true,
    description: "The payload of the user action",
  })
  data: BreakServiceToMicroserviceRecommendations;
}
