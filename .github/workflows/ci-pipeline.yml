name: CI-Pipeline

on:
  workflow_dispatch:
  push:
  #   branches: [master]
  # pull_request:
  #   branches: [master]
  #   types: [opened, reopened]

jobs:
  check-aws-resources:
    name: Check aws resources exist
    runs-on: ubuntu-latest
    outputs:
      create_folder_amplication: ${{ steps.check_chart.outputs.create_folder_amplication }}
      create_folder_server: ${{ steps.check_chart.outputs.create_folder_server }}
      create_folder_client: ${{ steps.check_chart.outputs.create_folder_client }}

    env:
      BUCKET_NAME: "amplication-charts"
      REGION: us-east-2

    steps:
      - name: Checkout 
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # need to add secret
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # need to add secret
          aws-region: ${{ env.REGION }}

      - name: Install aws cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1.0.2
        with:
          version: 2    
          verbose: false 
          arch: amd64  
      
        ## Will be false if this is first run.
      - name: Check umbrella-chart folder exist
        id: check_chart
        run: |
          set +e
          server_folder=$(aws s3 ls "s3://$BUCKET_NAME/amplication-server")
          if [[ -z "$server_folder" ]]
          then
            echo "No such folder in bucket" 
            echo "::set-output name=create_folder_server::true"
          else
            echo "::set-output name=create_folder_server::false"
          fi
          
          client_folder=$(aws s3 ls "s3://$BUCKET_NAME/amplication-client")
          if [[ -z "$server_folder" ]]
          then
            echo "No such folder in bucket" 
            echo "::set-output name=create_folder_client::true"
          else
            echo "::set-output name=create_folder_client::false"
          fi

          amplication_folder=$(aws s3 ls "s3://$BUCKET_NAME/amplication")
          if [[ -z "$amplication_folder" ]]
          then
            echo "No such folder in bucket" 
            echo "::set-output name=create_folder_amplication::true"
          else
            echo "::set-output name=create_folder_amplication::false"
          fi
         
  changes:
    runs-on: ubuntu-latest
    needs: check-aws-resources
    outputs:
      services: ${{ steps.filter.outputs.array }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v17.3
        with:
          separator: ","
          files_ignore: |
            .github/**
          files: |
            packages/**

      - name: Filter array
        id: filter
        env:
          ARRAY: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          if [[ ! -z $ARRAY ]]
          then 
            echo "$ARRAY"
            final=''
            for string in $(echo $ARRAY | sed "s/,/ /g")
            do
              prefix="packages/"
              no_prefix=${string#"$prefix"}
              final+="\"$( cut -d '/' -f 1 <<< "$no_prefix" )\", "
            done
            final+=''
            mod=$(echo $final | tr ' ' '\n' | sort | uniq | tr '\n' ' ' | sed -e 's/[[:space:]]*$//')
            modi=${mod%?}
            modif=[$(echo "$modi")]
            echo $modif
            echo "::set-output name=array::$modif"
          else
            final=''
            for d in packages/*
            do
              prefix="packages/"
              no_prefix=${d#"$prefix"}
              final+="\"$( cut -d '/' -f 1 <<< "$no_prefix" )\", "
            done
            mod=$(echo $final | tr ' ' '\n' | sort | uniq | tr '\n' ' ' | sed -e 's/[[:space:]]*$//')
            modi=${mod%?}
            modif=[$(echo "$modi")]
            echo $modif
            echo "::set-output name=array::$modif"
          fi
  
  # format:
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   if: ${{ needs.changes.outputs.services != '[]' && needs.changes.outputs.services != '' }}
  #   strategy:
  #     matrix:
  #       node-version: [16.x]
  #       service: ${{ fromJSON(needs.changes.outputs.services) }} 

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Check docker-service
  #     id: check-docker-service
  #     env: 
  #       SERVICE: ${{ matrix.service }}
  #     run: |
  #       FILE=packages/$SERVICE/Dockerfile
  #       if [[ -f "$FILE" ]] 
  #       then
  #         echo "$FILE exists."
  #         echo "::set-output name=docker-service::true"
  #       else
  #         echo "::set-output name=docker-service::false"
  #       fi

  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'
        
  #   - name: "Install dependencies ${{ matrix.service }}"
  #     if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
  #     run: npm ci

  #   - name: "Check format: ${{ matrix.service }}"
  #     if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
  #     working-directory: packages/${{ matrix.service }}
  #     run: npm run check-format
      
  # lint:
  #   runs-on: ubuntu-latest
  #   needs: [changes]
  #   if: ${{ needs.changes.outputs.services != '[]' && needs.changes.outputs.services != '' }}
  #   strategy:
  #     matrix:
  #       node-version: [16.x]
  #       service: ${{ fromJSON(needs.changes.outputs.services) }} 

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Check docker-service
  #     id: check-docker-service
  #     env: 
  #       SERVICE: ${{ matrix.service }}
  #     run: |
  #       FILE=packages/$SERVICE/Dockerfile
  #       if [[ -f "$FILE" ]] 
  #       then
  #         echo "$FILE exists."
  #         echo "::set-output name=docker-service::true"
  #       else
  #         echo "::set-output name=docker-service::false"
  #       fi

  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'
        
  #   - name: "Install dependencies ${{ matrix.service }}"
  #     if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
  #     run: npm ci
        
  #   - name: "Lint first run: ${{ matrix.service }}"
  #     if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
  #     working-directory: packages/${{ matrix.service }}
  #     run: npm run lint

  # build:
  #   runs-on: ubuntu-latest
  #   needs: [changes]
  #   if: ${{ needs.changes.outputs.services != '[]' && needs.changes.outputs.services != '' }}
  #   strategy:
  #     matrix:
  #       node-version: [16.x]
  #       service: ${{ fromJSON(needs.changes.outputs.services) }} 

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Check docker-service
  #     id: check-docker-service
  #     env: 
  #       SERVICE: ${{ matrix.service }}
  #     run: |
  #       FILE=packages/$SERVICE/Dockerfile
  #       if [[ -f "$FILE" ]] 
  #       then
  #         echo "$FILE exists."
  #         echo "::set-output name=docker-service::true"
  #       else
  #         echo "::set-output name=docker-service::false"
  #       fi

  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'
        
  #   - name: "Install dependencies ${{ matrix.service }}"
  #     if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
  #     run: npm ci

  #   - name: "Build packages first run: ${{ matrix.service }}"
  #     if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
  #     working-directory: packages/${{ matrix.service }}
  #     run: npm run build
 
  # test:
  #   runs-on: ubuntu-latest
  #   needs: [changes]
  #   if: ${{ needs.changes.outputs.services != '[]' && needs.changes.outputs.services != '' }}
  #   strategy:
  #     matrix:
  #       node-version: [16.x]
  #       service: ${{ fromJSON(needs.changes.outputs.services) }} 

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Check docker-service
  #     id: check-docker-service
  #     env: 
  #       SERVICE: ${{ matrix.service }}
  #     run: |
  #       FILE=packages/$SERVICE/Dockerfile
  #       if [[ -f "$FILE" ]] 
  #       then
  #         echo "$FILE exists."
  #         echo "::set-output name=docker-service::true"
  #       else
  #         echo "::set-output name=docker-service::false"
  #       fi

  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'
        
  #   - name: "Install dependencies ${{ matrix.service }}"
  #     if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
  #     run: npm ci
    
  #   - name: "Test first run: ${{ matrix.service }}"
  #     if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
  #     working-directory: packages/${{ matrix.service }}
  #     run: npm test

  docker:
    name: docker
    needs: [changes]
    if: always() && success() && (github.event_name == 'push')
    runs-on: ubuntu-latest
    outputs:
      docker-services: ${{ steps.check-docker-service.outputs.docker-service }}
    strategy:
      matrix:
        node-version: [16.x]
        service: ${{ fromJSON(needs.changes.outputs.services) }} 

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check docker-service
        id: check-docker-service
        env: 
          SERVICE: ${{ matrix.service }}
        run: |
          FILE=packages/$SERVICE/Dockerfile
          if [[ -f "$FILE" ]] 
          then
            echo "$FILE exists."
            echo "::set-output name=docker-service::true"
          else
            echo "::set-output name=docker-service::false"
          fi
      
      - name: Set up Docker Buildx
        if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
        uses: docker/setup-buildx-action@v1
      
      - name: Configure AWS credentials
        if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-east-2
          
      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set hash
        if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
        env:
          working-directory: packages/${{ matrix.service }}/Dockerfile
        run: |
          GITHUB_HASH_MOD=$(sha1sum packages/${{ matrix.service }}/Dockerfile | sha1sum)
          echo "GITHUB_HASH=${GITHUB_HASH_MOD%???}" >> $GITHUB_ENV
       
      - name: Check if repo exist
        working-directory: packages/${{ matrix.service }}
        if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
        env: 
          ECR_REPOSITORY: ${{ matrix.service }}
        run: aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
      
      - name: Check if tag already exist
        id: tag-exist
        if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
        env: 
          ECR_REPOSITORY: ${{ matrix.service }}
        run: |
          set +e
          cmd="$(aws ecr describe-images --repository-name=$ECR_REPOSITORY --image-ids=imageTag=$GITHUB_HASH)"
          if [[ ! -z "$cmd" ]]
          then  
            echo "tag already exist"
            echo "::set-output name=tag_exist::true"
          else
            echo "tag doesn't exist"
            echo "::set-output name=tag_exist::false"
          fi

      - name: set branch-name
        if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
        run: |
          echo "BRANCH_NAME=$(echo $GITHUB_REF_NAME | sed "s/\//-/g")" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        working-directory: packages/${{ matrix.service }}
        if: ${{ steps.check-docker-service.outputs.docker-service == 'true' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.service }}
          IMAGE_TAG: ${{ github.sha }}-${{ env.BRANCH_NAME }}-${{ github.run_id }}-${{ env.GITHUB_HASH }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # update-helm-chart:
  #   runs-on: ubuntu-latest
  #   needs: docker

  #   ## download artifats from s3
  #   ## aws s3api get-object --bucket DOC-EXAMPLE-BUCKET1 --key dir/my_images.tar.bz2 my_images.tar.bz2

  #   ## upload artifact to s3
  #   # aws s3 cp s3://$BUCKET_NAME/amplication-server amplication-charts/charts/services/server --recursive


 
      


      



